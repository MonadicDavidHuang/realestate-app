/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MapRouteImport } from './routes/map'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PropertiesIndexRouteImport } from './routes/properties/index'
import { Route as PropertiesNewRouteImport } from './routes/properties/new'
import { Route as PropertiesIdIndexRouteImport } from './routes/properties/$id/index'
import { Route as PropertiesIdEditRouteImport } from './routes/properties/$id/edit'

const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PropertiesIndexRoute = PropertiesIndexRouteImport.update({
  id: '/properties/',
  path: '/properties/',
  getParentRoute: () => rootRouteImport,
} as any)
const PropertiesNewRoute = PropertiesNewRouteImport.update({
  id: '/properties/new',
  path: '/properties/new',
  getParentRoute: () => rootRouteImport,
} as any)
const PropertiesIdIndexRoute = PropertiesIdIndexRouteImport.update({
  id: '/properties/$id/',
  path: '/properties/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const PropertiesIdEditRoute = PropertiesIdEditRouteImport.update({
  id: '/properties/$id/edit',
  path: '/properties/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/properties/new': typeof PropertiesNewRoute
  '/properties': typeof PropertiesIndexRoute
  '/properties/$id/edit': typeof PropertiesIdEditRoute
  '/properties/$id': typeof PropertiesIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/properties/new': typeof PropertiesNewRoute
  '/properties': typeof PropertiesIndexRoute
  '/properties/$id/edit': typeof PropertiesIdEditRoute
  '/properties/$id': typeof PropertiesIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/properties/new': typeof PropertiesNewRoute
  '/properties/': typeof PropertiesIndexRoute
  '/properties/$id/edit': typeof PropertiesIdEditRoute
  '/properties/$id/': typeof PropertiesIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/map'
    | '/properties/new'
    | '/properties'
    | '/properties/$id/edit'
    | '/properties/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/map'
    | '/properties/new'
    | '/properties'
    | '/properties/$id/edit'
    | '/properties/$id'
  id:
    | '__root__'
    | '/'
    | '/map'
    | '/properties/new'
    | '/properties/'
    | '/properties/$id/edit'
    | '/properties/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapRoute: typeof MapRoute
  PropertiesNewRoute: typeof PropertiesNewRoute
  PropertiesIndexRoute: typeof PropertiesIndexRoute
  PropertiesIdEditRoute: typeof PropertiesIdEditRoute
  PropertiesIdIndexRoute: typeof PropertiesIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/properties/': {
      id: '/properties/'
      path: '/properties'
      fullPath: '/properties'
      preLoaderRoute: typeof PropertiesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/properties/new': {
      id: '/properties/new'
      path: '/properties/new'
      fullPath: '/properties/new'
      preLoaderRoute: typeof PropertiesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/properties/$id/': {
      id: '/properties/$id/'
      path: '/properties/$id'
      fullPath: '/properties/$id'
      preLoaderRoute: typeof PropertiesIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/properties/$id/edit': {
      id: '/properties/$id/edit'
      path: '/properties/$id/edit'
      fullPath: '/properties/$id/edit'
      preLoaderRoute: typeof PropertiesIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapRoute: MapRoute,
  PropertiesNewRoute: PropertiesNewRoute,
  PropertiesIndexRoute: PropertiesIndexRoute,
  PropertiesIdEditRoute: PropertiesIdEditRoute,
  PropertiesIdIndexRoute: PropertiesIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
